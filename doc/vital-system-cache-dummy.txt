*vital-system-cache-dummy.txt*	A dummy class of unified cache system

Version: 0.1.0
Author:  Alisue <lambdalisue@hashnote.net>   *Vital.System.Cache.Dummy-author*
Support: Vim 7.3 and above
License: MIT license  {{{
	Copyright (c) 2014 Alisue, hashnote.net

	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files
	(the "Software"), to deal in the Software without restriction,
	including without limitation the rights to use, copy, modify, merge,
	publish, distribute, sublicense, and/or sell copies of the Software,
	and to permit persons to whom the Software is furnished to do so,
	subject to the following conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}


==============================================================================
CONTENTS			*Vital.System.Cache.Dummy-contents*

Introductions		|Vital.System.Cache.Dummy-intro|
Usage			|Vital.System.Cache.Dummy-usage|
Functions		|Vital.System.Cache.Dummy-funcs|
Methods			|Vital.System.Cache.Dummy-methods|


==============================================================================
INTRODUCTIONS				*Vital.System.Cache.Dummy-intro*

*Vital.System.Cache.Dummy* is a dummy class of unified cache system.


==============================================================================
USAGE					*Vital.System.Cache.Dummy-usage*

|Vital.Syste.Cache.Dummy| have all required API of unified cache system but
nothing would be cached. The following code works without caching values.
>
	let s:V = vital#of('vital')
	let s:C = s:V.import('System.Cache.Dummy')

	let s:factorial_cache = s:C.new()

	function! s:factorial(n)
	  if a:n == 0
	    return 1
	  elseif s:factorial_cache.has(a:n)
	    return s:factorial_cache.get(a:n)
	  else
	    let x = s:factorial(a:n - 1) * a:n
	    call s:factorial_cache.set(a:n, x)
	    return x
	  endif
	endfunction

	echo s:factorial(10)
<

==============================================================================
FUNCTIONS				*Vital.System.Cache.Dummy-funcs*

new()				*Vital.System.Cache.Dummy.new()*

	Create a new instance of System.Cache.Dummy.

==============================================================================
METHODS					*Vital.System.Cache.Dummy-methods*

cache_key({obj})		*Vital.System.Cache.Dummy.cache_key()*

	See |Vital.System.Cache.Base.cache_key()|.

has({name})			*Vital.System.Cache.Dummy.has()*

	Always return 0.
	
	{name} (required)
	Dummy.

get({name}, [, {default}])	*Vital.System.Cache.Dummy.get()*

	Always return a value of {default}. If no {default} is specified, an
	empty string will be returned.

	{name} (required)
	Dummy

	{default} (optional)
	A return value.

set({name}, {value})		*Vital.System.Cache.Dummy.set()*

	Do nothing.

	{name} (required)
	Dummy

	{value} (required)
	Dummy

keys()				*Vital.System.Cache.Dummy.keys()*

	Always return an empty list.

remove({name})			*Vital.System.Cache.Dummy.remove()*

	Do nothing.

	{name} (required)
	Dummy

clear()				*Vital.System.Cache.Dummy.clear()*

	Do nothing.

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
