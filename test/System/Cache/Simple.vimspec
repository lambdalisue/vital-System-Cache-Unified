" Use vim-themis to execute this test
let s:V = vital#of('vital')

Describe System.Cache.Simple
  let s:C = s:V.import('System.Cache.Simple')

  Context Usage (Factorial)
    let s:factorial_cache = s:C.new()

    function! s:factorial(n)
      if a:n == 0
        return 1
      elseif s:factorial_cache.has(a:n)
        return s:factorial_cache.get(a:n)
      else
        let x = s:factorial(a:n - 1) * a:n
        call s:factorial_cache.set(a:n, x)
        return x
      endif
    endfunction

    It should return correct factorial value
      let r = s:factorial(10)
      Assert Equals(r, 1*2*3*4*5*6*7*8*9*10)
    End
  End

  Context .new()
    It should return an instance
      let cache = s:C.new()
      Assert HasKey(cache, '_cached')
    End
  End

  Context instance
    Before each
      let cache = s:C.new()
    End

    It should have individual cache dictionary
      let cache1 = s:C.new()
      let cache2 = s:C.new()

      let cache1._cached['foo'] = 'foo'
      Assert HasKey(cache1._cached, 'foo')
      Assert !has_key(cache2._cached, 'foo')
    End

    Context .cache_key({str})
      It should return an original string in default
        let r = cache.cache_key('foo')
        Assert Equals(r, 'foo')
      End
    End

    Context .has({name})
      It should return 0 if a named cache is not found
        let r = cache.has('foo')
        Assert False(r)
      End

      It should return 1 if a named cache is found
        let cache._cached = {'foo': 'bar'}
        let r = cache.has('foo')
        Assert True(r)
      End
    End

    Context .get({name}[, {default}])
      It should return an empty string if a named cache is not found
        let r = cache.get('foo')
        Assert Equals(r, '')
      End

      It should return 'default' if a named cache is not found and 'default' is specified
        let r1 = cache.get('foo', 'hello')
        Assert Equals(r1, 'hello')

        let r2 = cache.get('foo', 0)
        Assert Equals(r2, 0)
      End

      It should return a value if a named cache is found
        let cache._cached = {'foo': 'bar'}
        let r = cache.get('foo')
        Assert Equals(r, 'bar')
      End
    End

    Context .set({name}, {value})
      It should save 'value' into a cache dictionary with given 'name'
        call cache.set('foo', 'foo')
        Assert HasKey(cache._cached, 'foo')
        Assert Equals(cache._cached['foo'], 'foo')
      End
    End

    Context .keys()
      It should return a list of keys
        let cache._cached = {
              \ 'foo': 'foo',
              \ 'bar': 'bar',
              \}
        let r = cache.keys()
        Assert Equals(sort(r), sort(['foo', 'bar']))
      End
    End

    Context .remove({name})
      It should do nothing if a named cache is not found
        call cache.remove('foo')
      End

      It should remove a named cache from a cache dictionary
        let cache._cached = {'foo': 'bar'}
        call cache.remove('foo')
        Assert !has_key(cache._cached, 'foo')
      End
    End

    Context .clear()
      It should clear a cache dictionary
        let cache._cached = {
              \ 'foo': 'foo',
              \ 'bar': 'bar',
              \}
        call cache.clear()
        Assert Equals(cache._cached, {})
      End
    End
  End
End
